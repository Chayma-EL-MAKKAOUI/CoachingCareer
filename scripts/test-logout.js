// Script pour tester la fonctionnalit√© de d√©connexion
console.log('üîì Test de la fonctionnalit√© de d√©connexion\n');

// Fonction pour tester la d√©connexion
function testLogout() {
  console.log('1. V√©rification de l\'√©tat de connexion...');
  
  // V√©rifier si l'utilisateur est connect√©
  const authToken = localStorage.getItem('authToken');
  const user = localStorage.getItem('user');
  
  if (!authToken && !user) {
    console.log('‚ùå Aucun utilisateur connect√© trouv√©');
    console.log('   Connectez-vous d\'abord pour tester la d√©connexion');
    return;
  }
  
  console.log('‚úÖ Utilisateur connect√© d√©tect√©');
  console.log(`   Token: ${authToken ? 'Pr√©sent' : 'Absent'}`);
  console.log(`   Donn√©es utilisateur: ${user ? 'Pr√©sentes' : 'Absentes'}`);
  
  // V√©rifier les donn√©es utilisateur sp√©cifiques
  const userObj = user ? JSON.parse(user) : null;
  if (userObj) {
    console.log(`   Nom: ${userObj.name}`);
    console.log(`   Email: ${userObj.email}`);
    
    // Chercher les donn√©es sp√©cifiques √† cet utilisateur
    const userStatsKey = `userStats_${userObj.id}`;
    const userActivityKey = `recentActivity_${userObj.id}`;
    
    const userStats = localStorage.getItem(userStatsKey);
    const userActivity = localStorage.getItem(userActivityKey);
    
    console.log(`   Statistiques (${userStatsKey}): ${userStats ? 'Pr√©sentes' : 'Absentes'}`);
    console.log(`   Activit√© (${userActivityKey}): ${userActivity ? 'Pr√©sente' : 'Absente'}`);
  }
  
  console.log('\n2. Test de la fonction de d√©connexion...');
  
  // Simuler la d√©connexion
  console.log('   Suppression du token d\'authentification...');
  localStorage.removeItem('authToken');
  
  console.log('   Suppression des donn√©es utilisateur...');
  localStorage.removeItem('user');
  
  console.log('   Suppression des statistiques g√©n√©rales...');
  localStorage.removeItem('userStats');
  localStorage.removeItem('recentActivity');
  
  // Nettoyer les donn√©es sp√©cifiques √† l'utilisateur
  console.log('   Nettoyage des donn√©es sp√©cifiques √† l\'utilisateur...');
  const keys = Object.keys(localStorage);
  let cleanedKeys = 0;
  
  keys.forEach(key => {
    if (key.startsWith('userStats_') || key.startsWith('recentActivity_')) {
      localStorage.removeItem(key);
      cleanedKeys++;
      console.log(`     Supprim√©: ${key}`);
    }
  });
  
  console.log(`   ${cleanedKeys} cl√©s sp√©cifiques supprim√©es`);
  
  console.log('\n3. V√©rification post-d√©connexion...');
  
  // V√©rifier que tout a √©t√© nettoy√©
  const remainingToken = localStorage.getItem('authToken');
  const remainingUser = localStorage.getItem('user');
  const remainingStats = localStorage.getItem('userStats');
  const remainingActivity = localStorage.getItem('recentActivity');
  
  console.log(`   Token: ${remainingToken ? '‚ùå Encore pr√©sent' : '‚úÖ Supprim√©'}`);
  console.log(`   Utilisateur: ${remainingUser ? '‚ùå Encore pr√©sent' : '‚úÖ Supprim√©'}`);
  console.log(`   Statistiques: ${remainingStats ? '‚ùå Encore pr√©sentes' : '‚úÖ Supprim√©es'}`);
  console.log(`   Activit√©: ${remainingActivity ? '‚ùå Encore pr√©sente' : '‚úÖ Supprim√©e'}`);
  
  // V√©rifier les cl√©s restantes
  const finalKeys = Object.keys(localStorage);
  const userSpecificKeys = finalKeys.filter(key => 
    key.startsWith('userStats_') || key.startsWith('recentActivity_')
  );
  
  if (userSpecificKeys.length > 0) {
    console.log('   ‚ö†Ô∏è  Cl√©s sp√©cifiques utilisateur restantes:');
    userSpecificKeys.forEach(key => console.log(`     - ${key}`));
  } else {
    console.log('   ‚úÖ Toutes les cl√©s sp√©cifiques utilisateur supprim√©es');
  }
  
  console.log('\n4. üéØ R√©sultat du test:');
  
  if (!remainingToken && !remainingUser && !remainingStats && !remainingActivity && userSpecificKeys.length === 0) {
    console.log('‚úÖ SUCC√àS: D√©connexion compl√®te r√©ussie');
    console.log('   Toutes les donn√©es ont √©t√© correctement supprim√©es');
  } else {
    console.log('‚ùå √âCHEC: D√©connexion incompl√®te');
    console.log('   Certaines donn√©es n\'ont pas √©t√© supprim√©es');
  }
  
  console.log('\n5. üîÑ Instructions pour tester dans l\'application:');
  console.log('   1. Rechargez la page (F5)');
  console.log('   2. V√©rifiez que vous √™tes d√©connect√©');
  console.log('   3. Essayez d\'acc√©der aux fonctionnalit√©s prot√©g√©es');
  console.log('   4. V√©rifiez la redirection vers /auth/login');
}

// Fonction pour restaurer un utilisateur de test
function restoreTestUser() {
  console.log('\nüîÑ Restauration d\'un utilisateur de test...');
  
  const testUser = {
    id: 5,
    name: 'Marie Dubois',
    email: 'marie.dubois@example.com',
    isLoggedIn: true
  };
  
  const testToken = 'test-token-' + Date.now();
  
  localStorage.setItem('authToken', testToken);
  localStorage.setItem('user', JSON.stringify(testUser));
  
  // Ajouter des donn√©es de test
  const testStats = {
    totalAnalyses: 12,
    bulletinAnalyses: 5,
    salaryAnalyses: 4,
    careerCoaching: 3,
    lastUpdated: new Date().toISOString()
  };
  
  const testActivity = [
    {
      title: 'Test - Analyse bulletin de paie',
      date: new Date().toISOString(),
      type: 'bulletin'
    }
  ];
  
  localStorage.setItem(`userStats_${testUser.id}`, JSON.stringify(testStats));
  localStorage.setItem(`recentActivity_${testUser.id}`, JSON.stringify(testActivity));
  
  console.log('‚úÖ Utilisateur de test restaur√©');
  console.log(`   Nom: ${testUser.name}`);
  console.log(`   Email: ${testUser.email}`);
  console.log('   Rechargez la page pour voir les changements');
}

// Fonctions disponibles globalement
window.testLogout = testLogout;
window.restoreTestUser = restoreTestUser;

console.log('üìã Fonctions disponibles:');
console.log('   testLogout() - Tester la d√©connexion');
console.log('   restoreTestUser() - Restaurer un utilisateur de test');
console.log('\nüöÄ Ex√©cutez testLogout() pour commencer le test');

// Auto-ex√©cution si pas dans un navigateur
if (typeof window === 'undefined') {
  console.log('üí° Copiez ce script dans la console du navigateur pour l\'utiliser');
}
